/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.serializer;

import com.google.inject.Inject;
import edu.upb.lp.isc.losMelos.CompBool;
import edu.upb.lp.isc.losMelos.ExprArithmetic;
import edu.upb.lp.isc.losMelos.ExprCar;
import edu.upb.lp.isc.losMelos.ExprCdr;
import edu.upb.lp.isc.losMelos.ExprCons;
import edu.upb.lp.isc.losMelos.ExprIf;
import edu.upb.lp.isc.losMelos.ExprInt;
import edu.upb.lp.isc.losMelos.ExprIsEmpty;
import edu.upb.lp.isc.losMelos.ExprLength;
import edu.upb.lp.isc.losMelos.ExprList;
import edu.upb.lp.isc.losMelos.ExprList2;
import edu.upb.lp.isc.losMelos.ExprParam;
import edu.upb.lp.isc.losMelos.ExprPrint;
import edu.upb.lp.isc.losMelos.ExprString;
import edu.upb.lp.isc.losMelos.Funciones;
import edu.upb.lp.isc.losMelos.LlamadaFuncion;
import edu.upb.lp.isc.losMelos.LlamadaParametro;
import edu.upb.lp.isc.losMelos.LosMelosPackage;
import edu.upb.lp.isc.losMelos.OpBool;
import edu.upb.lp.isc.losMelos.Program;
import edu.upb.lp.isc.losMelos.ValBool;
import edu.upb.lp.isc.losMelos.Variables;
import edu.upb.lp.isc.services.LosMelosGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LosMelosSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LosMelosGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LosMelosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LosMelosPackage.COMP_BOOL:
				sequence_CompBool(context, (CompBool) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_ARITHMETIC:
				sequence_ExprArithmetic(context, (ExprArithmetic) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_CAR:
				sequence_ExprCar(context, (ExprCar) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_CDR:
				sequence_ExprCdr(context, (ExprCdr) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_CONS:
				sequence_ExprCons(context, (ExprCons) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_IF:
				sequence_ExprIf(context, (ExprIf) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_INT:
				sequence_ExprInt(context, (ExprInt) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_IS_EMPTY:
				sequence_ExprIsEmpty(context, (ExprIsEmpty) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_LENGTH:
				sequence_ExprLength(context, (ExprLength) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_LIST:
				sequence_ExprList(context, (ExprList) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_LIST2:
				sequence_ExprList2(context, (ExprList2) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_PARAM:
				sequence_ExprParam(context, (ExprParam) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_PRINT:
				sequence_ExprPrint(context, (ExprPrint) semanticObject); 
				return; 
			case LosMelosPackage.EXPR_STRING:
				sequence_ExprString(context, (ExprString) semanticObject); 
				return; 
			case LosMelosPackage.FUNCIONES:
				sequence_Funciones(context, (Funciones) semanticObject); 
				return; 
			case LosMelosPackage.LLAMADA_FUNCION:
				sequence_LlamadaFuncion(context, (LlamadaFuncion) semanticObject); 
				return; 
			case LosMelosPackage.LLAMADA_PARAMETRO:
				sequence_LlamadaParametro(context, (LlamadaParametro) semanticObject); 
				return; 
			case LosMelosPackage.OP_BOOL:
				sequence_OpBool(context, (OpBool) semanticObject); 
				return; 
			case LosMelosPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case LosMelosPackage.VAL_BOOL:
				sequence_ValBool(context, (ValBool) semanticObject); 
				return; 
			case LosMelosPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expresion returns CompBool
	 *     ExpresionVar returns CompBool
	 *     ExprBool returns CompBool
	 *     CompBool returns CompBool
	 *     ExprThen returns CompBool
	 *     ExprElse returns CompBool
	 *     ElementList returns CompBool
	 *     Ejecuciones returns CompBool
	 *
	 * Constraint:
	 *     (
	 *         (var='=' | var='<' | var='>' | var='<=' | var='>=') 
	 *         (val3=ExprNumber | val3=ExprParam | val3=FuncList) 
	 *         (val4=ExprNumber | val4=ExprParam | val4=FuncList)
	 *     )
	 */
	protected void sequence_CompBool(ISerializationContext context, CompBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprArithmetic
	 *     Basica returns ExprArithmetic
	 *     ExprNumber returns ExprArithmetic
	 *     ExprArithmetic returns ExprArithmetic
	 *     ExprThen returns ExprArithmetic
	 *     ExprElse returns ExprArithmetic
	 *     Ejecuciones returns ExprArithmetic
	 *
	 * Constraint:
	 *     (
	 *         (simbolo='+' | simbolo='-' | simbolo='*' | simbolo='/' | simbolo='%') 
	 *         (val1=ExprParam | val1=ExprNumber | val1=LlamadaFuncion) 
	 *         (val2=ExprParam | val2=ExprNumber | val2=LlamadaFuncion)
	 *     )
	 */
	protected void sequence_ExprArithmetic(ISerializationContext context, ExprArithmetic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprCar
	 *     ExprThen returns ExprCar
	 *     ExprElse returns ExprCar
	 *     FuncList returns ExprCar
	 *     ExprCar returns ExprCar
	 *     Ejecuciones returns ExprCar
	 *
	 * Constraint:
	 *     (list=ExprList | list=ExprParam | list=LlamadaFuncion | list=ExprCdr)
	 */
	protected void sequence_ExprCar(ISerializationContext context, ExprCar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprCdr
	 *     ExprThen returns ExprCdr
	 *     ExprElse returns ExprCdr
	 *     FuncList returns ExprCdr
	 *     ExprCdr returns ExprCdr
	 *     Ejecuciones returns ExprCdr
	 *
	 * Constraint:
	 *     (list=ExprList | list=ExprParam | list=LlamadaFuncion)
	 */
	protected void sequence_ExprCdr(ISerializationContext context, ExprCdr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprCons
	 *     ExprThen returns ExprCons
	 *     ExprElse returns ExprCons
	 *     FuncList returns ExprCons
	 *     ExprCons returns ExprCons
	 *     Ejecuciones returns ExprCons
	 *
	 * Constraint:
	 *     (l1=Expresion l2=Expresion)
	 */
	protected void sequence_ExprCons(ISerializationContext context, ExprCons semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_CONS__L1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_CONS__L1));
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_CONS__L2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_CONS__L2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprConsAccess().getL1ExpresionParserRuleCall_2_0(), semanticObject.getL1());
		feeder.accept(grammarAccess.getExprConsAccess().getL2ExpresionParserRuleCall_3_0(), semanticObject.getL2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprIf
	 *     ExprIf returns ExprIf
	 *     ExprThen returns ExprIf
	 *     ExprElse returns ExprIf
	 *     Ejecuciones returns ExprIf
	 *
	 * Constraint:
	 *     ((condition=ExprBool | condition=ExprIsEmpty) then=ExprThen else=ExprElse)
	 */
	protected void sequence_ExprIf(ISerializationContext context, ExprIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprInt
	 *     ExpresionVar returns ExprInt
	 *     Basica returns ExprInt
	 *     ExprNumber returns ExprInt
	 *     ExprInt returns ExprInt
	 *     ExprThen returns ExprInt
	 *     ExprElse returns ExprInt
	 *     ElementList returns ExprInt
	 *
	 * Constraint:
	 *     var=INT
	 */
	protected void sequence_ExprInt(ISerializationContext context, ExprInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_INT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_INT__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprIntAccess().getVarINTTerminalRuleCall_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprIsEmpty
	 *     ExprThen returns ExprIsEmpty
	 *     ExprElse returns ExprIsEmpty
	 *     FuncList returns ExprIsEmpty
	 *     ExprIsEmpty returns ExprIsEmpty
	 *     Ejecuciones returns ExprIsEmpty
	 *
	 * Constraint:
	 *     (list=ExprList2 | list=ExprParam)
	 */
	protected void sequence_ExprIsEmpty(ISerializationContext context, ExprIsEmpty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprLength
	 *     ExprThen returns ExprLength
	 *     ExprElse returns ExprLength
	 *     FuncList returns ExprLength
	 *     ExprLength returns ExprLength
	 *     Ejecuciones returns ExprLength
	 *
	 * Constraint:
	 *     (list=ExprList2 | list=ExprParam)
	 */
	protected void sequence_ExprLength(ISerializationContext context, ExprLength semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprList2
	 *     ExprThen returns ExprList2
	 *     ExprElse returns ExprList2
	 *     ExprList2 returns ExprList2
	 *
	 * Constraint:
	 *     lista+=Expresion*
	 */
	protected void sequence_ExprList2(ISerializationContext context, ExprList2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpresionVar returns ExprList
	 *     ExprList returns ExprList
	 *     Ejecuciones returns ExprList
	 *
	 * Constraint:
	 *     lista+=Expresion*
	 */
	protected void sequence_ExprList(ISerializationContext context, ExprList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprParam
	 *     Basica returns ExprParam
	 *     ExprParam returns ExprParam
	 *     ExprThen returns ExprParam
	 *     ExprElse returns ExprParam
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ExprParam(ISerializationContext context, ExprParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_PARAM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprParamAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprPrint
	 *     Basica returns ExprPrint
	 *     ExprThen returns ExprPrint
	 *     ExprElse returns ExprPrint
	 *     ExprPrint returns ExprPrint
	 *
	 * Constraint:
	 *     var=Expresion
	 */
	protected void sequence_ExprPrint(ISerializationContext context, ExprPrint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_PRINT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_PRINT__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprPrintAccess().getVarExpresionParserRuleCall_2_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ExprString
	 *     ExpresionVar returns ExprString
	 *     Basica returns ExprString
	 *     ExprString returns ExprString
	 *     ExprThen returns ExprString
	 *     ExprElse returns ExprString
	 *     ElementList returns ExprString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_ExprString(ISerializationContext context, ExprString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.EXPR_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.EXPR_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Definiciones returns Funciones
	 *     Funciones returns Funciones
	 *
	 * Constraint:
	 *     (name=ID param+=ID* body=Expresion?)
	 */
	protected void sequence_Funciones(ISerializationContext context, Funciones semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns LlamadaFuncion
	 *     LlamadaFuncion returns LlamadaFuncion
	 *     ExprThen returns LlamadaFuncion
	 *     ExprElse returns LlamadaFuncion
	 *     Ejecuciones returns LlamadaFuncion
	 *
	 * Constraint:
	 *     (namefuncion=[Funciones|ID] param+=Expresion*)
	 */
	protected void sequence_LlamadaFuncion(ISerializationContext context, LlamadaFuncion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LlamadaParametro returns LlamadaParametro
	 *
	 * Constraint:
	 *     param=[ExprParam|ID]
	 */
	protected void sequence_LlamadaParametro(ISerializationContext context, LlamadaParametro semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.LLAMADA_PARAMETRO__PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.LLAMADA_PARAMETRO__PARAM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLlamadaParametroAccess().getParamExprParamIDTerminalRuleCall_0_1(), semanticObject.eGet(LosMelosPackage.Literals.LLAMADA_PARAMETRO__PARAM, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns OpBool
	 *     ExpresionVar returns OpBool
	 *     ExprBool returns OpBool
	 *     OpBool returns OpBool
	 *     ExprThen returns OpBool
	 *     ExprElse returns OpBool
	 *     ElementList returns OpBool
	 *     Ejecuciones returns OpBool
	 *
	 * Constraint:
	 *     ((var='and' | var='or') op1=ExprBool op2=ExprBool)
	 */
	protected void sequence_OpBool(ISerializationContext context, OpBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=ID seccionDefiniciones+=Definiciones+ seccionEjecuciones+=Ejecuciones+)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expresion returns ValBool
	 *     ExpresionVar returns ValBool
	 *     ExprBool returns ValBool
	 *     ValBool returns ValBool
	 *     ExprThen returns ValBool
	 *     ExprElse returns ValBool
	 *     ElementList returns ValBool
	 *     Ejecuciones returns ValBool
	 *
	 * Constraint:
	 *     (var='#f' | var='#t')
	 */
	protected void sequence_ValBool(ISerializationContext context, ValBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definiciones returns Variables
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     (name=ID body=ExpresionVar)
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.DEFINICIONES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.DEFINICIONES__NAME));
			if (transientValues.isValueTransient(semanticObject, LosMelosPackage.Literals.VARIABLES__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LosMelosPackage.Literals.VARIABLES__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariablesAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariablesAccess().getBodyExpresionVarParserRuleCall_3_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
}
