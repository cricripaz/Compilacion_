/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LosMelosGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINICIONESKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSeccionDefinicionesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSeccionDefinicionesDefinicionesParserRuleCall_3_0 = (RuleCall)cSeccionDefinicionesAssignment_3.eContents().get(0);
		private final Keyword cEJECUCIONESKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSeccionEjecucionesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSeccionEjecucionesEjecucionesParserRuleCall_6_0 = (RuleCall)cSeccionEjecucionesAssignment_6.eContents().get(0);
		
		//Program:
		//    "DEFINICIONES"":" name=ID
		//    seccionDefiniciones += Definiciones+
		//    "EJECUCIONES"":"
		//    seccionEjecuciones += Ejecuciones+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"DEFINICIONES"":" name=ID
		//seccionDefiniciones += Definiciones+
		//"EJECUCIONES"":"
		//seccionEjecuciones += Ejecuciones+
		public Group getGroup() { return cGroup; }
		
		//"DEFINICIONES"
		public Keyword getDEFINICIONESKeyword_0() { return cDEFINICIONESKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//seccionDefiniciones += Definiciones+
		public Assignment getSeccionDefinicionesAssignment_3() { return cSeccionDefinicionesAssignment_3; }
		
		//Definiciones
		public RuleCall getSeccionDefinicionesDefinicionesParserRuleCall_3_0() { return cSeccionDefinicionesDefinicionesParserRuleCall_3_0; }
		
		//"EJECUCIONES"
		public Keyword getEJECUCIONESKeyword_4() { return cEJECUCIONESKeyword_4; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//seccionEjecuciones += Ejecuciones+
		public Assignment getSeccionEjecucionesAssignment_6() { return cSeccionEjecucionesAssignment_6; }
		
		//Ejecuciones
		public RuleCall getSeccionEjecucionesEjecucionesParserRuleCall_6_0() { return cSeccionEjecucionesEjecucionesParserRuleCall_6_0; }
	}
	public class DefinicionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Definiciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncionesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariablesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definiciones:
		//    Funciones | Variables
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Funciones | Variables
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Funciones
		public RuleCall getFuncionesParserRuleCall_0() { return cFuncionesParserRuleCall_0; }
		
		//Variables
		public RuleCall getVariablesParserRuleCall_1() { return cVariablesParserRuleCall_1; }
	}
	public class FuncionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Funciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamIDTerminalRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyExpresionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Funciones:
		//    "(""define"  "(" name = ID  param+=ID* ")" body=Expresion? ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""define"  "(" name = ID  param+=ID* ")" body=Expresion? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name = ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//param+=ID*
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_4_0() { return cParamIDTerminalRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Expresion?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Expresion
		public RuleCall getBodyExpresionParserRuleCall_6_0() { return cBodyExpresionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyExpresionVarParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variables:
		//    "(""value" name = ID body= ExpresionVar ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""value" name = ID body= ExpresionVar ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"value"
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//body= ExpresionVar
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ExpresionVar
		public RuleCall getBodyExpresionVarParserRuleCall_3_0() { return cBodyExpresionVarParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Expresion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLlamadaFuncionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuncListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExprList2ParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expresion:
		//    Basica | LlamadaFuncion | ExprBool |ExprIf |FuncList | ExprList2
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Basica | LlamadaFuncion | ExprBool |ExprIf |FuncList | ExprList2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Basica
		public RuleCall getBasicaParserRuleCall_0() { return cBasicaParserRuleCall_0; }
		
		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_1() { return cLlamadaFuncionParserRuleCall_1; }
		
		//ExprBool
		public RuleCall getExprBoolParserRuleCall_2() { return cExprBoolParserRuleCall_2; }
		
		//ExprIf
		public RuleCall getExprIfParserRuleCall_3() { return cExprIfParserRuleCall_3; }
		
		//FuncList
		public RuleCall getFuncListParserRuleCall_4() { return cFuncListParserRuleCall_4; }
		
		//ExprList2
		public RuleCall getExprList2ParserRuleCall_5() { return cExprList2ParserRuleCall_5; }
	}
	public class LlamadaParametroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.LlamadaParametro");
		private final Assignment cParamAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParamExprParamCrossReference_0 = (CrossReference)cParamAssignment.eContents().get(0);
		private final RuleCall cParamExprParamIDTerminalRuleCall_0_1 = (RuleCall)cParamExprParamCrossReference_0.eContents().get(1);
		
		//LlamadaParametro:
		//    param=[ExprParam]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//param=[ExprParam]
		public Assignment getParamAssignment() { return cParamAssignment; }
		
		//[ExprParam]
		public CrossReference getParamExprParamCrossReference_0() { return cParamExprParamCrossReference_0; }
		
		//ID
		public RuleCall getParamExprParamIDTerminalRuleCall_0_1() { return cParamExprParamIDTerminalRuleCall_0_1; }
	}
	public class ExpresionVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExpresionVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ExpresionVar:
		//    ExprInt |ExprString |ExprBool |ExprList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprInt |ExprString |ExprBool |ExprList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprInt
		public RuleCall getExprIntParserRuleCall_0() { return cExprIntParserRuleCall_0; }
		
		//ExprString
		public RuleCall getExprStringParserRuleCall_1() { return cExprStringParserRuleCall_1; }
		
		//ExprBool
		public RuleCall getExprBoolParserRuleCall_2() { return cExprBoolParserRuleCall_2; }
		
		//ExprList
		public RuleCall getExprListParserRuleCall_3() { return cExprListParserRuleCall_3; }
	}
	public class BasicaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Basica");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprPrintParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Basica:
		//    ExprString  | ExprNumber | ExprParam | ExprPrint
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprString  | ExprNumber | ExprParam | ExprPrint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprString
		public RuleCall getExprStringParserRuleCall_0() { return cExprStringParserRuleCall_0; }
		
		//ExprNumber
		public RuleCall getExprNumberParserRuleCall_1() { return cExprNumberParserRuleCall_1; }
		
		//ExprParam
		public RuleCall getExprParamParserRuleCall_2() { return cExprParamParserRuleCall_2; }
		
		//ExprPrint
		public RuleCall getExprPrintParserRuleCall_3() { return cExprPrintParserRuleCall_3; }
	}
	public class ExprStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//ExprString:
		//    val = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class ExprNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprArithmeticParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNumber:
		//    ExprInt | ExprArithmetic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprInt | ExprArithmetic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprInt
		public RuleCall getExprIntParserRuleCall_0() { return cExprIntParserRuleCall_0; }
		
		//ExprArithmetic
		public RuleCall getExprArithmeticParserRuleCall_1() { return cExprArithmeticParserRuleCall_1; }
	}
	public class ExprIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprInt");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarINTTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//ExprInt :
		//    var = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = INT
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//INT
		public RuleCall getVarINTTerminalRuleCall_0() { return cVarINTTerminalRuleCall_0; }
	}
	public class ExprArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprArithmetic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSimboloAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSimboloAlternatives_1_0 = (Alternatives)cSimboloAssignment_1.eContents().get(0);
		private final Keyword cSimboloPlusSignKeyword_1_0_0 = (Keyword)cSimboloAlternatives_1_0.eContents().get(0);
		private final Keyword cSimboloHyphenMinusKeyword_1_0_1 = (Keyword)cSimboloAlternatives_1_0.eContents().get(1);
		private final Keyword cSimboloAsteriskKeyword_1_0_2 = (Keyword)cSimboloAlternatives_1_0.eContents().get(2);
		private final Keyword cSimboloSolidusKeyword_1_0_3 = (Keyword)cSimboloAlternatives_1_0.eContents().get(3);
		private final Keyword cSimboloPercentSignKeyword_1_0_4 = (Keyword)cSimboloAlternatives_1_0.eContents().get(4);
		private final Assignment cVal1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cVal1Alternatives_2_0 = (Alternatives)cVal1Assignment_2.eContents().get(0);
		private final RuleCall cVal1ExprParamParserRuleCall_2_0_0 = (RuleCall)cVal1Alternatives_2_0.eContents().get(0);
		private final RuleCall cVal1ExprNumberParserRuleCall_2_0_1 = (RuleCall)cVal1Alternatives_2_0.eContents().get(1);
		private final RuleCall cVal1LlamadaFuncionParserRuleCall_2_0_2 = (RuleCall)cVal1Alternatives_2_0.eContents().get(2);
		private final Assignment cVal2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cVal2Alternatives_3_0 = (Alternatives)cVal2Assignment_3.eContents().get(0);
		private final RuleCall cVal2ExprParamParserRuleCall_3_0_0 = (RuleCall)cVal2Alternatives_3_0.eContents().get(0);
		private final RuleCall cVal2ExprNumberParserRuleCall_3_0_1 = (RuleCall)cVal2Alternatives_3_0.eContents().get(1);
		private final RuleCall cVal2LlamadaFuncionParserRuleCall_3_0_2 = (RuleCall)cVal2Alternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprArithmetic:
		//    "("simbolo=("+"|"-"|"*"|"/"|"%")  val1=(ExprParam|ExprNumber|LlamadaFuncion)
		//                                     val2=(ExprParam|ExprNumber|LlamadaFuncion)   ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"("simbolo=("+"|"-"|"*"|"/"|"%")  val1=(ExprParam|ExprNumber|LlamadaFuncion)
		//                                 val2=(ExprParam|ExprNumber|LlamadaFuncion)   ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//simbolo=("+"|"-"|"*"|"/"|"%")
		public Assignment getSimboloAssignment_1() { return cSimboloAssignment_1; }
		
		//("+"|"-"|"*"|"/"|"%")
		public Alternatives getSimboloAlternatives_1_0() { return cSimboloAlternatives_1_0; }
		
		//"+"
		public Keyword getSimboloPlusSignKeyword_1_0_0() { return cSimboloPlusSignKeyword_1_0_0; }
		
		//"-"
		public Keyword getSimboloHyphenMinusKeyword_1_0_1() { return cSimboloHyphenMinusKeyword_1_0_1; }
		
		//"*"
		public Keyword getSimboloAsteriskKeyword_1_0_2() { return cSimboloAsteriskKeyword_1_0_2; }
		
		//"/"
		public Keyword getSimboloSolidusKeyword_1_0_3() { return cSimboloSolidusKeyword_1_0_3; }
		
		//"%"
		public Keyword getSimboloPercentSignKeyword_1_0_4() { return cSimboloPercentSignKeyword_1_0_4; }
		
		//val1=(ExprParam|ExprNumber|LlamadaFuncion)
		public Assignment getVal1Assignment_2() { return cVal1Assignment_2; }
		
		//(ExprParam|ExprNumber|LlamadaFuncion)
		public Alternatives getVal1Alternatives_2_0() { return cVal1Alternatives_2_0; }
		
		//ExprParam
		public RuleCall getVal1ExprParamParserRuleCall_2_0_0() { return cVal1ExprParamParserRuleCall_2_0_0; }
		
		//ExprNumber
		public RuleCall getVal1ExprNumberParserRuleCall_2_0_1() { return cVal1ExprNumberParserRuleCall_2_0_1; }
		
		//LlamadaFuncion
		public RuleCall getVal1LlamadaFuncionParserRuleCall_2_0_2() { return cVal1LlamadaFuncionParserRuleCall_2_0_2; }
		
		//val2=(ExprParam|ExprNumber|LlamadaFuncion)
		public Assignment getVal2Assignment_3() { return cVal2Assignment_3; }
		
		//(ExprParam|ExprNumber|LlamadaFuncion)
		public Alternatives getVal2Alternatives_3_0() { return cVal2Alternatives_3_0; }
		
		//ExprParam
		public RuleCall getVal2ExprParamParserRuleCall_3_0_0() { return cVal2ExprParamParserRuleCall_3_0_0; }
		
		//ExprNumber
		public RuleCall getVal2ExprNumberParserRuleCall_3_0_1() { return cVal2ExprNumberParserRuleCall_3_0_1; }
		
		//LlamadaFuncion
		public RuleCall getVal2LlamadaFuncionParserRuleCall_3_0_2() { return cVal2LlamadaFuncionParserRuleCall_3_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExprParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprParam");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExprParam:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LlamadaFuncionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.LlamadaFuncion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamefuncionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamefuncionFuncionesCrossReference_1_0 = (CrossReference)cNamefuncionAssignment_1.eContents().get(0);
		private final RuleCall cNamefuncionFuncionesIDTerminalRuleCall_1_0_1 = (RuleCall)cNamefuncionFuncionesCrossReference_1_0.eContents().get(1);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamExpresionParserRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LlamadaFuncion:
		//    "("namefuncion = [Funciones] param+=Expresion*")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"("namefuncion = [Funciones] param+=Expresion*")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//namefuncion = [Funciones]
		public Assignment getNamefuncionAssignment_1() { return cNamefuncionAssignment_1; }
		
		//[Funciones]
		public CrossReference getNamefuncionFuncionesCrossReference_1_0() { return cNamefuncionFuncionesCrossReference_1_0; }
		
		//ID
		public RuleCall getNamefuncionFuncionesIDTerminalRuleCall_1_0_1() { return cNamefuncionFuncionesIDTerminalRuleCall_1_0_1; }
		
		//param+=Expresion*
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }
		
		//Expresion
		public RuleCall getParamExpresionParserRuleCall_2_0() { return cParamExpresionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExprBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOpBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExprBool :
		//    ValBool | CompBool | OpBool
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValBool | CompBool | OpBool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValBool
		public RuleCall getValBoolParserRuleCall_0() { return cValBoolParserRuleCall_0; }
		
		//CompBool
		public RuleCall getCompBoolParserRuleCall_1() { return cCompBoolParserRuleCall_1; }
		
		//OpBool
		public RuleCall getOpBoolParserRuleCall_2() { return cOpBoolParserRuleCall_2; }
	}
	public class ValBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ValBool");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cVarAlternatives_0 = (Alternatives)cVarAssignment.eContents().get(0);
		private final Keyword cVarFKeyword_0_0 = (Keyword)cVarAlternatives_0.eContents().get(0);
		private final Keyword cVarTKeyword_0_1 = (Keyword)cVarAlternatives_0.eContents().get(1);
		
		//ValBool:
		//    var = ("#f" | "#t")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = ("#f" | "#t")
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//("#f" | "#t")
		public Alternatives getVarAlternatives_0() { return cVarAlternatives_0; }
		
		//"#f"
		public Keyword getVarFKeyword_0_0() { return cVarFKeyword_0_0; }
		
		//"#t"
		public Keyword getVarTKeyword_0_1() { return cVarTKeyword_0_1; }
	}
	public class CompBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.CompBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVarAlternatives_1_0 = (Alternatives)cVarAssignment_1.eContents().get(0);
		private final Keyword cVarEqualsSignKeyword_1_0_0 = (Keyword)cVarAlternatives_1_0.eContents().get(0);
		private final Keyword cVarLessThanSignKeyword_1_0_1 = (Keyword)cVarAlternatives_1_0.eContents().get(1);
		private final Keyword cVarGreaterThanSignKeyword_1_0_2 = (Keyword)cVarAlternatives_1_0.eContents().get(2);
		private final Keyword cVarLessThanSignEqualsSignKeyword_1_0_3 = (Keyword)cVarAlternatives_1_0.eContents().get(3);
		private final Keyword cVarGreaterThanSignEqualsSignKeyword_1_0_4 = (Keyword)cVarAlternatives_1_0.eContents().get(4);
		private final Assignment cVal3Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cVal3Alternatives_2_0 = (Alternatives)cVal3Assignment_2.eContents().get(0);
		private final RuleCall cVal3ExprNumberParserRuleCall_2_0_0 = (RuleCall)cVal3Alternatives_2_0.eContents().get(0);
		private final RuleCall cVal3ExprParamParserRuleCall_2_0_1 = (RuleCall)cVal3Alternatives_2_0.eContents().get(1);
		private final RuleCall cVal3FuncListParserRuleCall_2_0_2 = (RuleCall)cVal3Alternatives_2_0.eContents().get(2);
		private final Assignment cVal4Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cVal4Alternatives_3_0 = (Alternatives)cVal4Assignment_3.eContents().get(0);
		private final RuleCall cVal4ExprNumberParserRuleCall_3_0_0 = (RuleCall)cVal4Alternatives_3_0.eContents().get(0);
		private final RuleCall cVal4ExprParamParserRuleCall_3_0_1 = (RuleCall)cVal4Alternatives_3_0.eContents().get(1);
		private final RuleCall cVal4FuncListParserRuleCall_3_0_2 = (RuleCall)cVal4Alternatives_3_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompBool:
		//   "("  var = ("=" | "<" |">"|"<="|">=") val3=(ExprNumber | ExprParam|FuncList)
		//                                            val4=(ExprNumber | ExprParam|FuncList) ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"("  var = ("=" | "<" |">"|"<="|">=") val3=(ExprNumber | ExprParam|FuncList)
		//                                         val4=(ExprNumber | ExprParam|FuncList) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//var = ("=" | "<" |">"|"<="|">=")
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//("=" | "<" |">"|"<="|">=")
		public Alternatives getVarAlternatives_1_0() { return cVarAlternatives_1_0; }
		
		//"="
		public Keyword getVarEqualsSignKeyword_1_0_0() { return cVarEqualsSignKeyword_1_0_0; }
		
		//"<"
		public Keyword getVarLessThanSignKeyword_1_0_1() { return cVarLessThanSignKeyword_1_0_1; }
		
		//">"
		public Keyword getVarGreaterThanSignKeyword_1_0_2() { return cVarGreaterThanSignKeyword_1_0_2; }
		
		//"<="
		public Keyword getVarLessThanSignEqualsSignKeyword_1_0_3() { return cVarLessThanSignEqualsSignKeyword_1_0_3; }
		
		//">="
		public Keyword getVarGreaterThanSignEqualsSignKeyword_1_0_4() { return cVarGreaterThanSignEqualsSignKeyword_1_0_4; }
		
		//val3=(ExprNumber | ExprParam|FuncList)
		public Assignment getVal3Assignment_2() { return cVal3Assignment_2; }
		
		//(ExprNumber | ExprParam|FuncList)
		public Alternatives getVal3Alternatives_2_0() { return cVal3Alternatives_2_0; }
		
		//ExprNumber
		public RuleCall getVal3ExprNumberParserRuleCall_2_0_0() { return cVal3ExprNumberParserRuleCall_2_0_0; }
		
		//ExprParam
		public RuleCall getVal3ExprParamParserRuleCall_2_0_1() { return cVal3ExprParamParserRuleCall_2_0_1; }
		
		//FuncList
		public RuleCall getVal3FuncListParserRuleCall_2_0_2() { return cVal3FuncListParserRuleCall_2_0_2; }
		
		//val4=(ExprNumber | ExprParam|FuncList)
		public Assignment getVal4Assignment_3() { return cVal4Assignment_3; }
		
		//(ExprNumber | ExprParam|FuncList)
		public Alternatives getVal4Alternatives_3_0() { return cVal4Alternatives_3_0; }
		
		//ExprNumber
		public RuleCall getVal4ExprNumberParserRuleCall_3_0_0() { return cVal4ExprNumberParserRuleCall_3_0_0; }
		
		//ExprParam
		public RuleCall getVal4ExprParamParserRuleCall_3_0_1() { return cVal4ExprParamParserRuleCall_3_0_1; }
		
		//FuncList
		public RuleCall getVal4FuncListParserRuleCall_3_0_2() { return cVal4FuncListParserRuleCall_3_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OpBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.OpBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVarAlternatives_1_0 = (Alternatives)cVarAssignment_1.eContents().get(0);
		private final Keyword cVarAndKeyword_1_0_0 = (Keyword)cVarAlternatives_1_0.eContents().get(0);
		private final Keyword cVarOrKeyword_1_0_1 = (Keyword)cVarAlternatives_1_0.eContents().get(1);
		private final Assignment cOp1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp1ExprBoolParserRuleCall_2_0 = (RuleCall)cOp1Assignment_2.eContents().get(0);
		private final Assignment cOp2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOp2ExprBoolParserRuleCall_3_0 = (RuleCall)cOp2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpBool:
		//     "(" var =("and" | "or")  op1 = ExprBool  op2= ExprBool")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" var =("and" | "or")  op1 = ExprBool  op2= ExprBool")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//var =("and" | "or")
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//("and" | "or")
		public Alternatives getVarAlternatives_1_0() { return cVarAlternatives_1_0; }
		
		//"and"
		public Keyword getVarAndKeyword_1_0_0() { return cVarAndKeyword_1_0_0; }
		
		//"or"
		public Keyword getVarOrKeyword_1_0_1() { return cVarOrKeyword_1_0_1; }
		
		//op1 = ExprBool
		public Assignment getOp1Assignment_2() { return cOp1Assignment_2; }
		
		//ExprBool
		public RuleCall getOp1ExprBoolParserRuleCall_2_0() { return cOp1ExprBoolParserRuleCall_2_0; }
		
		//op2= ExprBool
		public Assignment getOp2Assignment_3() { return cOp2Assignment_3; }
		
		//ExprBool
		public RuleCall getOp2ExprBoolParserRuleCall_3_0() { return cOp2ExprBoolParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExprIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cConditionAlternatives_2_0 = (Alternatives)cConditionAssignment_2.eContents().get(0);
		private final RuleCall cConditionExprBoolParserRuleCall_2_0_0 = (RuleCall)cConditionAlternatives_2_0.eContents().get(0);
		private final RuleCall cConditionExprIsEmptyParserRuleCall_2_0_1 = (RuleCall)cConditionAlternatives_2_0.eContents().get(1);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExprThenParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseExprElseParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExprIf:
		//    "(" "if" condition=(ExprBool | ExprIsEmpty )  then=ExprThen   else=ExprElse  ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "if" condition=(ExprBool | ExprIsEmpty )  then=ExprThen   else=ExprElse  ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//condition=(ExprBool | ExprIsEmpty )
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//(ExprBool | ExprIsEmpty )
		public Alternatives getConditionAlternatives_2_0() { return cConditionAlternatives_2_0; }
		
		//ExprBool
		public RuleCall getConditionExprBoolParserRuleCall_2_0_0() { return cConditionExprBoolParserRuleCall_2_0_0; }
		
		//ExprIsEmpty
		public RuleCall getConditionExprIsEmptyParserRuleCall_2_0_1() { return cConditionExprIsEmptyParserRuleCall_2_0_1; }
		
		//then=ExprThen
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//ExprThen
		public RuleCall getThenExprThenParserRuleCall_3_0() { return cThenExprThenParserRuleCall_3_0; }
		
		//else=ExprElse
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }
		
		//ExprElse
		public RuleCall getElseExprElseParserRuleCall_4_0() { return cElseExprElseParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExprThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprThen");
		private final RuleCall cExpresionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprThen:
		//    Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expresion
		public RuleCall getExpresionParserRuleCall() { return cExpresionParserRuleCall; }
	}
	public class ExprElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprElse");
		private final RuleCall cExpresionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExprElse:
		//    Expresion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expresion
		public RuleCall getExpresionParserRuleCall() { return cExpresionParserRuleCall; }
	}
	public class ExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListaExpresionParserRuleCall_3_0 = (RuleCall)cListaAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprList:
		//    {ExprList} "(""list" lista += Expresion* ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprList} "(""list" lista += Expresion* ")"
		public Group getGroup() { return cGroup; }
		
		//{ExprList}
		public Action getExprListAction_0() { return cExprListAction_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//"list"
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//lista += Expresion*
		public Assignment getListaAssignment_3() { return cListaAssignment_3; }
		
		//Expresion
		public RuleCall getListaExpresionParserRuleCall_3_0() { return cListaExpresionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExprList2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprList2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprList2Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cListaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListaExpresionParserRuleCall_3_0 = (RuleCall)cListaAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprList2:
		//    {ExprList2} "(""list" lista += Expresion* ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprList2} "(""list" lista += Expresion* ")"
		public Group getGroup() { return cGroup; }
		
		//{ExprList2}
		public Action getExprList2Action_0() { return cExprList2Action_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//"list"
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//lista += Expresion*
		public Assignment getListaAssignment_3() { return cListaAssignment_3; }
		
		//Expresion
		public RuleCall getListaExpresionParserRuleCall_3_0() { return cListaExpresionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ElementList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementList:
		//    ExprInt |ExprString |ExprBool
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprInt |ExprString |ExprBool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprInt
		public RuleCall getExprIntParserRuleCall_0() { return cExprIntParserRuleCall_0; }
		
		//ExprString
		public RuleCall getExprStringParserRuleCall_1() { return cExprStringParserRuleCall_1; }
		
		//ExprBool
		public RuleCall getExprBoolParserRuleCall_2() { return cExprBoolParserRuleCall_2; }
	}
	public class FuncListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.FuncList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprCarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprCdrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExprConsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprIsEmptyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExprLengthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FuncList:
		//    ExprCar | ExprCdr | ExprCons | ExprIsEmpty | ExprLength
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprCar | ExprCdr | ExprCons | ExprIsEmpty | ExprLength
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprCar
		public RuleCall getExprCarParserRuleCall_0() { return cExprCarParserRuleCall_0; }
		
		//ExprCdr
		public RuleCall getExprCdrParserRuleCall_1() { return cExprCdrParserRuleCall_1; }
		
		//ExprCons
		public RuleCall getExprConsParserRuleCall_2() { return cExprConsParserRuleCall_2; }
		
		//ExprIsEmpty
		public RuleCall getExprIsEmptyParserRuleCall_3() { return cExprIsEmptyParserRuleCall_3; }
		
		//ExprLength
		public RuleCall getExprLengthParserRuleCall_4() { return cExprLengthParserRuleCall_4; }
	}
	public class ExprCarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprCar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListExprListParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListExprParamParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListLlamadaFuncionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final RuleCall cListExprCdrParserRuleCall_2_0_3 = (RuleCall)cListAlternatives_2_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprCar:
		//    "(" "car" (list =  (ExprList | ExprParam | LlamadaFuncion | ExprCdr)) ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "car" (list =  (ExprList | ExprParam | LlamadaFuncion | ExprCdr)) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"car"
		public Keyword getCarKeyword_1() { return cCarKeyword_1; }
		
		//(list =  (ExprList | ExprParam | LlamadaFuncion | ExprCdr))
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ExprList | ExprParam | LlamadaFuncion | ExprCdr)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ExprList
		public RuleCall getListExprListParserRuleCall_2_0_0() { return cListExprListParserRuleCall_2_0_0; }
		
		//ExprParam
		public RuleCall getListExprParamParserRuleCall_2_0_1() { return cListExprParamParserRuleCall_2_0_1; }
		
		//LlamadaFuncion
		public RuleCall getListLlamadaFuncionParserRuleCall_2_0_2() { return cListLlamadaFuncionParserRuleCall_2_0_2; }
		
		//ExprCdr
		public RuleCall getListExprCdrParserRuleCall_2_0_3() { return cListExprCdrParserRuleCall_2_0_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExprCdrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprCdr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCdrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListExprListParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListExprParamParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final RuleCall cListLlamadaFuncionParserRuleCall_2_0_2 = (RuleCall)cListAlternatives_2_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprCdr:
		//    "(""cdr" (list =  (ExprList | ExprParam | LlamadaFuncion )) ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""cdr" (list =  (ExprList | ExprParam | LlamadaFuncion )) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cdr"
		public Keyword getCdrKeyword_1() { return cCdrKeyword_1; }
		
		//(list =  (ExprList | ExprParam | LlamadaFuncion ))
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ExprList | ExprParam | LlamadaFuncion )
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ExprList
		public RuleCall getListExprListParserRuleCall_2_0_0() { return cListExprListParserRuleCall_2_0_0; }
		
		//ExprParam
		public RuleCall getListExprParamParserRuleCall_2_0_1() { return cListExprParamParserRuleCall_2_0_1; }
		
		//LlamadaFuncion
		public RuleCall getListLlamadaFuncionParserRuleCall_2_0_2() { return cListLlamadaFuncionParserRuleCall_2_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExprConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprCons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cL1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cL1ExpresionParserRuleCall_2_0 = (RuleCall)cL1Assignment_2.eContents().get(0);
		private final Assignment cL2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cL2ExpresionParserRuleCall_3_0 = (RuleCall)cL2Assignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprCons:
		//    "(""cons" (l1 = Expresion) (l2= Expresion) ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""cons" (l1 = Expresion) (l2= Expresion) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cons"
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }
		
		//(l1 = Expresion)
		public Assignment getL1Assignment_2() { return cL1Assignment_2; }
		
		//Expresion
		public RuleCall getL1ExpresionParserRuleCall_2_0() { return cL1ExpresionParserRuleCall_2_0; }
		
		//(l2= Expresion)
		public Assignment getL2Assignment_3() { return cL2Assignment_3; }
		
		//Expresion
		public RuleCall getL2ExpresionParserRuleCall_3_0() { return cL2ExpresionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExprIsEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprIsEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListExprList2ParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListExprParamParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprIsEmpty:
		//    "(""empty?" list = (ExprList2 | ExprParam) ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""empty?" list = (ExprList2 | ExprParam) ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"empty?"
		public Keyword getEmptyKeyword_1() { return cEmptyKeyword_1; }
		
		//list = (ExprList2 | ExprParam)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ExprList2 | ExprParam)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ExprList2
		public RuleCall getListExprList2ParserRuleCall_2_0_0() { return cListExprList2ParserRuleCall_2_0_0; }
		
		//ExprParam
		public RuleCall getListExprParamParserRuleCall_2_0_1() { return cListExprParamParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExprLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cListAlternatives_2_0 = (Alternatives)cListAssignment_2.eContents().get(0);
		private final RuleCall cListExprList2ParserRuleCall_2_0_0 = (RuleCall)cListAlternatives_2_0.eContents().get(0);
		private final RuleCall cListExprParamParserRuleCall_2_0_1 = (RuleCall)cListAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprLength:
		//    "(" "length" list = (ExprList2| ExprParam)  ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "length" list = (ExprList2| ExprParam)  ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"length"
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//list = (ExprList2| ExprParam)
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//(ExprList2| ExprParam)
		public Alternatives getListAlternatives_2_0() { return cListAlternatives_2_0; }
		
		//ExprList2
		public RuleCall getListExprList2ParserRuleCall_2_0_0() { return cListExprList2ParserRuleCall_2_0_0; }
		
		//ExprParam
		public RuleCall getListExprParamParserRuleCall_2_0_1() { return cListExprParamParserRuleCall_2_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExprPrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.ExprPrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarExpresionParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprPrint:
		//    "(""println" var = Expresion ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"(""println" var = Expresion ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"println"
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//var = Expresion
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//Expresion
		public RuleCall getVarExpresionParserRuleCall_2_0() { return cVarExpresionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EjecucionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.LosMelos.Ejecuciones");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprArithmeticParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLlamadaFuncionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExprListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExprIfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFuncListParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Ejecuciones:
		//   ExprArithmetic | ExprBool | LlamadaFuncion |ExprList |ExprIf |FuncList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprArithmetic | ExprBool | LlamadaFuncion |ExprList |ExprIf |FuncList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprArithmetic
		public RuleCall getExprArithmeticParserRuleCall_0() { return cExprArithmeticParserRuleCall_0; }
		
		//ExprBool
		public RuleCall getExprBoolParserRuleCall_1() { return cExprBoolParserRuleCall_1; }
		
		//LlamadaFuncion
		public RuleCall getLlamadaFuncionParserRuleCall_2() { return cLlamadaFuncionParserRuleCall_2; }
		
		//ExprList
		public RuleCall getExprListParserRuleCall_3() { return cExprListParserRuleCall_3; }
		
		//ExprIf
		public RuleCall getExprIfParserRuleCall_4() { return cExprIfParserRuleCall_4; }
		
		//FuncList
		public RuleCall getFuncListParserRuleCall_5() { return cFuncListParserRuleCall_5; }
	}
	
	
	private final ProgramElements pProgram;
	private final DefinicionesElements pDefiniciones;
	private final FuncionesElements pFunciones;
	private final VariablesElements pVariables;
	private final ExpresionElements pExpresion;
	private final LlamadaParametroElements pLlamadaParametro;
	private final ExpresionVarElements pExpresionVar;
	private final BasicaElements pBasica;
	private final ExprStringElements pExprString;
	private final ExprNumberElements pExprNumber;
	private final ExprIntElements pExprInt;
	private final ExprArithmeticElements pExprArithmetic;
	private final ExprParamElements pExprParam;
	private final LlamadaFuncionElements pLlamadaFuncion;
	private final ExprBoolElements pExprBool;
	private final ValBoolElements pValBool;
	private final CompBoolElements pCompBool;
	private final OpBoolElements pOpBool;
	private final ExprIfElements pExprIf;
	private final ExprThenElements pExprThen;
	private final ExprElseElements pExprElse;
	private final ExprListElements pExprList;
	private final ExprList2Elements pExprList2;
	private final ElementListElements pElementList;
	private final FuncListElements pFuncList;
	private final ExprCarElements pExprCar;
	private final ExprCdrElements pExprCdr;
	private final ExprConsElements pExprCons;
	private final ExprIsEmptyElements pExprIsEmpty;
	private final ExprLengthElements pExprLength;
	private final ExprPrintElements pExprPrint;
	private final EjecucionesElements pEjecuciones;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LosMelosGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDefiniciones = new DefinicionesElements();
		this.pFunciones = new FuncionesElements();
		this.pVariables = new VariablesElements();
		this.pExpresion = new ExpresionElements();
		this.pLlamadaParametro = new LlamadaParametroElements();
		this.pExpresionVar = new ExpresionVarElements();
		this.pBasica = new BasicaElements();
		this.pExprString = new ExprStringElements();
		this.pExprNumber = new ExprNumberElements();
		this.pExprInt = new ExprIntElements();
		this.pExprArithmetic = new ExprArithmeticElements();
		this.pExprParam = new ExprParamElements();
		this.pLlamadaFuncion = new LlamadaFuncionElements();
		this.pExprBool = new ExprBoolElements();
		this.pValBool = new ValBoolElements();
		this.pCompBool = new CompBoolElements();
		this.pOpBool = new OpBoolElements();
		this.pExprIf = new ExprIfElements();
		this.pExprThen = new ExprThenElements();
		this.pExprElse = new ExprElseElements();
		this.pExprList = new ExprListElements();
		this.pExprList2 = new ExprList2Elements();
		this.pElementList = new ElementListElements();
		this.pFuncList = new FuncListElements();
		this.pExprCar = new ExprCarElements();
		this.pExprCdr = new ExprCdrElements();
		this.pExprCons = new ExprConsElements();
		this.pExprIsEmpty = new ExprIsEmptyElements();
		this.pExprLength = new ExprLengthElements();
		this.pExprPrint = new ExprPrintElements();
		this.pEjecuciones = new EjecucionesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.LosMelos".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    "DEFINICIONES"":" name=ID
	//    seccionDefiniciones += Definiciones+
	//    "EJECUCIONES"":"
	//    seccionEjecuciones += Ejecuciones+
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definiciones:
	//    Funciones | Variables
	//;
	public DefinicionesElements getDefinicionesAccess() {
		return pDefiniciones;
	}
	
	public ParserRule getDefinicionesRule() {
		return getDefinicionesAccess().getRule();
	}
	
	//Funciones:
	//    "(""define"  "(" name = ID  param+=ID* ")" body=Expresion? ")"
	//;
	public FuncionesElements getFuncionesAccess() {
		return pFunciones;
	}
	
	public ParserRule getFuncionesRule() {
		return getFuncionesAccess().getRule();
	}
	
	//Variables:
	//    "(""value" name = ID body= ExpresionVar ")"
	//;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//Expresion:
	//    Basica | LlamadaFuncion | ExprBool |ExprIf |FuncList | ExprList2
	//;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//LlamadaParametro:
	//    param=[ExprParam]
	//;
	public LlamadaParametroElements getLlamadaParametroAccess() {
		return pLlamadaParametro;
	}
	
	public ParserRule getLlamadaParametroRule() {
		return getLlamadaParametroAccess().getRule();
	}
	
	//ExpresionVar:
	//    ExprInt |ExprString |ExprBool |ExprList
	//;
	public ExpresionVarElements getExpresionVarAccess() {
		return pExpresionVar;
	}
	
	public ParserRule getExpresionVarRule() {
		return getExpresionVarAccess().getRule();
	}
	
	//Basica:
	//    ExprString  | ExprNumber | ExprParam | ExprPrint
	//;
	public BasicaElements getBasicaAccess() {
		return pBasica;
	}
	
	public ParserRule getBasicaRule() {
		return getBasicaAccess().getRule();
	}
	
	//ExprString:
	//    val = STRING
	//;
	public ExprStringElements getExprStringAccess() {
		return pExprString;
	}
	
	public ParserRule getExprStringRule() {
		return getExprStringAccess().getRule();
	}
	
	//ExprNumber:
	//    ExprInt | ExprArithmetic
	//;
	public ExprNumberElements getExprNumberAccess() {
		return pExprNumber;
	}
	
	public ParserRule getExprNumberRule() {
		return getExprNumberAccess().getRule();
	}
	
	//ExprInt :
	//    var = INT
	//;
	public ExprIntElements getExprIntAccess() {
		return pExprInt;
	}
	
	public ParserRule getExprIntRule() {
		return getExprIntAccess().getRule();
	}
	
	//ExprArithmetic:
	//    "("simbolo=("+"|"-"|"*"|"/"|"%")  val1=(ExprParam|ExprNumber|LlamadaFuncion)
	//                                     val2=(ExprParam|ExprNumber|LlamadaFuncion)   ")"
	//;
	public ExprArithmeticElements getExprArithmeticAccess() {
		return pExprArithmetic;
	}
	
	public ParserRule getExprArithmeticRule() {
		return getExprArithmeticAccess().getRule();
	}
	
	//ExprParam:
	//    name = ID
	//;
	public ExprParamElements getExprParamAccess() {
		return pExprParam;
	}
	
	public ParserRule getExprParamRule() {
		return getExprParamAccess().getRule();
	}
	
	//LlamadaFuncion:
	//    "("namefuncion = [Funciones] param+=Expresion*")"
	//;
	public LlamadaFuncionElements getLlamadaFuncionAccess() {
		return pLlamadaFuncion;
	}
	
	public ParserRule getLlamadaFuncionRule() {
		return getLlamadaFuncionAccess().getRule();
	}
	
	//ExprBool :
	//    ValBool | CompBool | OpBool
	//;
	public ExprBoolElements getExprBoolAccess() {
		return pExprBool;
	}
	
	public ParserRule getExprBoolRule() {
		return getExprBoolAccess().getRule();
	}
	
	//ValBool:
	//    var = ("#f" | "#t")
	//;
	public ValBoolElements getValBoolAccess() {
		return pValBool;
	}
	
	public ParserRule getValBoolRule() {
		return getValBoolAccess().getRule();
	}
	
	//CompBool:
	//   "("  var = ("=" | "<" |">"|"<="|">=") val3=(ExprNumber | ExprParam|FuncList)
	//                                            val4=(ExprNumber | ExprParam|FuncList) ")"
	//;
	public CompBoolElements getCompBoolAccess() {
		return pCompBool;
	}
	
	public ParserRule getCompBoolRule() {
		return getCompBoolAccess().getRule();
	}
	
	//OpBool:
	//     "(" var =("and" | "or")  op1 = ExprBool  op2= ExprBool")"
	//;
	public OpBoolElements getOpBoolAccess() {
		return pOpBool;
	}
	
	public ParserRule getOpBoolRule() {
		return getOpBoolAccess().getRule();
	}
	
	//ExprIf:
	//    "(" "if" condition=(ExprBool | ExprIsEmpty )  then=ExprThen   else=ExprElse  ")"
	//;
	public ExprIfElements getExprIfAccess() {
		return pExprIf;
	}
	
	public ParserRule getExprIfRule() {
		return getExprIfAccess().getRule();
	}
	
	//ExprThen:
	//    Expresion
	//;
	public ExprThenElements getExprThenAccess() {
		return pExprThen;
	}
	
	public ParserRule getExprThenRule() {
		return getExprThenAccess().getRule();
	}
	
	//ExprElse:
	//    Expresion
	//;
	public ExprElseElements getExprElseAccess() {
		return pExprElse;
	}
	
	public ParserRule getExprElseRule() {
		return getExprElseAccess().getRule();
	}
	
	//ExprList:
	//    {ExprList} "(""list" lista += Expresion* ")"
	//;
	public ExprListElements getExprListAccess() {
		return pExprList;
	}
	
	public ParserRule getExprListRule() {
		return getExprListAccess().getRule();
	}
	
	//ExprList2:
	//    {ExprList2} "(""list" lista += Expresion* ")"
	//;
	public ExprList2Elements getExprList2Access() {
		return pExprList2;
	}
	
	public ParserRule getExprList2Rule() {
		return getExprList2Access().getRule();
	}
	
	//ElementList:
	//    ExprInt |ExprString |ExprBool
	//;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//FuncList:
	//    ExprCar | ExprCdr | ExprCons | ExprIsEmpty | ExprLength
	//;
	public FuncListElements getFuncListAccess() {
		return pFuncList;
	}
	
	public ParserRule getFuncListRule() {
		return getFuncListAccess().getRule();
	}
	
	//ExprCar:
	//    "(" "car" (list =  (ExprList | ExprParam | LlamadaFuncion | ExprCdr)) ")"
	//;
	public ExprCarElements getExprCarAccess() {
		return pExprCar;
	}
	
	public ParserRule getExprCarRule() {
		return getExprCarAccess().getRule();
	}
	
	//ExprCdr:
	//    "(""cdr" (list =  (ExprList | ExprParam | LlamadaFuncion )) ")"
	//;
	public ExprCdrElements getExprCdrAccess() {
		return pExprCdr;
	}
	
	public ParserRule getExprCdrRule() {
		return getExprCdrAccess().getRule();
	}
	
	//ExprCons:
	//    "(""cons" (l1 = Expresion) (l2= Expresion) ")"
	//;
	public ExprConsElements getExprConsAccess() {
		return pExprCons;
	}
	
	public ParserRule getExprConsRule() {
		return getExprConsAccess().getRule();
	}
	
	//ExprIsEmpty:
	//    "(""empty?" list = (ExprList2 | ExprParam) ")"
	//;
	public ExprIsEmptyElements getExprIsEmptyAccess() {
		return pExprIsEmpty;
	}
	
	public ParserRule getExprIsEmptyRule() {
		return getExprIsEmptyAccess().getRule();
	}
	
	//ExprLength:
	//    "(" "length" list = (ExprList2| ExprParam)  ")"
	//;
	public ExprLengthElements getExprLengthAccess() {
		return pExprLength;
	}
	
	public ParserRule getExprLengthRule() {
		return getExprLengthAccess().getRule();
	}
	
	//ExprPrint:
	//    "(""println" var = Expresion ")"
	//;
	public ExprPrintElements getExprPrintAccess() {
		return pExprPrint;
	}
	
	public ParserRule getExprPrintRule() {
		return getExprPrintAccess().getRule();
	}
	
	//Ejecuciones:
	//   ExprArithmetic | ExprBool | LlamadaFuncion |ExprList |ExprIf |FuncList
	//;
	public EjecucionesElements getEjecucionesAccess() {
		return pEjecuciones;
	}
	
	public ParserRule getEjecucionesRule() {
		return getEjecucionesAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
